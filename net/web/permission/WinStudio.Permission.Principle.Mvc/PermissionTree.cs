using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace WinStudio.Permission.Principle.Mvc
{
    public class PermissionTree : IPermissionTree
    {
        public PermissionTree(string name) { this.name = name; }
        public PermissionTree() { }

        private string name = string.Empty;
        public string Name { get { return name; } }

        private List<IPermissionNode> IPermissionNodes = new List<IPermissionNode>();
        private List<IPermissionNode> IPermissionPieces = new List<IPermissionNode>();

        public void AddPermissionNode(IPermissionNode node)
        {
            if (node.NodeType == PermissionNodeType.Role)
            {
                IPermissionNode role = IPermissionNodes.Find(n => n.Code == node.Code);
                if (role == null)
                {
                    IPermissionNodes.Add(node);
                    return;
                }
                if (string.IsNullOrEmpty(role.Name))
                {
                    IPermissionNodes.Remove(role);
                    IPermissionNodes.Add(node);
                }
                return;
            }

            if (string.IsNullOrEmpty(node.ParentCode))
                IPermissionNodes.Add(node);
            else
            {
                IPermissionNode parent = GetNode(node.ParentCode);
                if (parent != null)
                    parent.AddChildren(node);
                else IPermissionPieces.Add(node);
            }
        }

        public IPermissionNode GetNode(string code)
        {
            return Find(IPermissionNodes, code);
        }

        public List<IPermissionNode> GetNodes(PermissionNodeType type = PermissionNodeType.Virtual)
        {
            if (type == PermissionNodeType.Virtual)
            {
                IPermissionNodes.Sort(Sort);
                return IPermissionNodes;
            }
            return IPermissionNodes.Where(n => n.NodeType == type).ToList();
        }

        private IPermissionNode Find(List<IPermissionNode> nodes, string code)
        {
            foreach (IPermissionNode node in nodes)
            {
                if (node.Code == code) return node;
                var n = Find(node.Children, code);
                if (n != null) return n;
            }
            return null;
        }
        public void PickupPieces()
        {
            IPermissionPieces.Reverse();
            IPermissionPieces.ForEach(p => AddPermissionNode(p));
        }

        public void SetName(string name) { this.name = name; }
        public void ToXml(string path)
        {
            this.SaveToXmlDocument(path);
        }
        public void LoadXml(string path)
        {
            this.LoadXmlDocument(path);
        }
        private int Sort(IPermissionNode n1, IPermissionNode n2)
        {
            return n1.NodeType - n2.NodeType;
        }
    }
    public static class Extensions
    {
        internal static void SaveToXmlDocument(this IPermissionTree tree, string filepath)
        {
            try
            {
                FileInfo fi = new FileInfo(filepath);
                if (!Directory.Exists(fi.DirectoryName))
                    Directory.CreateDirectory(fi.DirectoryName);
                XmlDocument xml = new XmlDocument();
                xml.CreateXmlDeclaration("1.0", UTF8Encoding.UTF8.BodyName, null);
                xml.CreateComment("This file is automatically generated. Please do not modify the contents of this file.");
                XmlElement ele = xml.CreateElement("WinPermissionNodeConfigurations");
                ele.SetAttribute("Area", tree.Name);
                xml.AppendChild(ele);
                XmlElement roles = xml.CreateElement("Roles");
                ele.AppendChild(roles);
                XmlElement funcs = xml.CreateElement("Functions");
                ele.AppendChild(funcs);
                foreach (IPermissionNode node in tree.GetNodes(PermissionNodeType.Role))
                {
                    XmlElement role = xml.CreateElement(node.NodeType.ToString());
                    roles.AppendChild(role);
                    role.SetAttribute("Name", node.Name);
                    role.SetAttribute("Code", node.Code);
                    role.SetAttribute("Display", node.Display.ToString());
                    role.SetAttribute("Editable", node.Editable.ToString());
                    role.SetAttribute("Address", node.Address);
                }

                xml.AppendPermissionNode(funcs, tree.GetNodes(PermissionNodeType.Function));

                xml.Save(filepath);
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        internal static void AppendPermissionNode(this XmlDocument doc, XmlElement parent, List<IPermissionNode> nodes)
        {
            foreach (IPermissionNode node in nodes)
            {
                XmlElement ele = doc.CreateElement(node.NodeType.ToString());
                parent.AppendChild(ele);
                ele.SetAttribute("Name", node.Name);
                ele.SetAttribute("Code", node.Code);
                ele.SetAttribute("ParentCode", node.ParentCode);
                ele.SetAttribute("Display", node.Display.ToString());
                ele.SetAttribute("Editable", node.Editable.ToString());
                ele.SetAttribute("Address", node.Address);
                if (node.Children.Count > 0)
                {
                    doc.AppendPermissionNode(ele, node.Children);
                }
            }
        }

        internal static void LoadXmlDocument(this IPermissionTree tree, string filepath)
        {
            try
            {
                string xml = File.ReadAllText(filepath);
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(xml);
                XmlElement root = doc.DocumentElement;
                tree.SetName(root.Attributes["Area"].Value);
                foreach (XmlNode node in root.ChildNodes)
                {
                    if (node.Name == "Roles")
                    {
                        foreach (XmlNode role in node.ChildNodes)
                        {
                            tree.AddPermissionNode(
                                PermissionNode.CreateNodeType(
                                PermissionNodeType.Role,
                                role.Attributes["Name"].Value,
                                role.Attributes["Code"].Value, null,
                                role.Attributes["Display"].Value.ToBoolean()));
                        }
                    }
                    else if (node.Name == "Functions")
                    {
                        tree.AppendPermissionNode(node.ChildNodes, true);
                    }
                }
                tree.PickupPieces();
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        internal static void AppendPermissionNode(this IPermissionTree tree, XmlNodeList nodes, bool isroot = false)
        {
            foreach (XmlNode node in nodes)
            {
                tree.AddPermissionNode(
                    PermissionNode.CreateNodeType(
                    PermissionNodeType.Function,
                    node.Attributes["Name"].Value,
                    node.Attributes["Code"].Value,
                    isroot ? null : node.Attributes["ParentCode"].Value,
                    node.Attributes["Display"].Value.ToBoolean(),
                    node.Attributes["Address"].Value));
                if (node.HasChildNodes)
                    tree.AppendPermissionNode(node.ChildNodes, false);
            }
        }

    }
}
